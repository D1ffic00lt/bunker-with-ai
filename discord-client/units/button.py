from .active_cards import *


class ControlButtons(discord.ui.View):
    ATTRIBUTES_TRANSLATE = {
        "–ü–æ–ª –∏ –í–æ–∑—Ä–∞—Å—Ç": "age_revealed",
        "–ó–¥–æ—Ä–æ–≤—å–µ": "health_revealed",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": "profession_revealed",
        "–•–æ–±–±–∏": "hobby_revealed",
        "–ë–∞–≥–∞–∂": "luggage_revealed",
        "–§–∞–∫—Ç 1": "fact1_revealed",
        "–§–∞–∫—Ç 2": "fact2_revealed",
        "–§–æ–±–∏—è": "phobia_revealed",
        "–ê–∫—Ç–∏–≤–Ω–∞—è –ö–∞—Ä—Ç–∞": "action_card_revealed"
    }

    def __init__(self, code, *, bot, user_data):
        super().__init__(timeout=None)
        self.messages = []
        self.game_code = code
        self.bot = bot
        if not user_data["active"]:
            for i in self.children:
                i.disabled = True
            return
        for i in self.children:
            if i.label not in self.ATTRIBUTES_TRANSLATE:
                continue
            if user_data[self.ATTRIBUTES_TRANSLATE[i.label]]:
                i.disabled = True

    async def send(self, attribute, user_id):
        async with httpx.AsyncClient() as client:
            try:
                await client.patch(
                    "http://api:9462/bunker/api/v1/reveal-characteristic/{}/{}".format(
                        self.game_code, user_id
                    ),
                    json={
                        "attribute": attribute
                    }
                )
            except httpx.TimeoutException:
                pass

    @discord.ui.button(label="–ü–æ–ª –∏ –í–æ–∑—Ä–∞—Å—Ç", style=discord.ButtonStyle.primary, emoji="üë¥")
    async def gender_and_age_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("gender", inter.user.id)
        await self.send("age", inter.user.id)
        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–ó–¥–æ—Ä–æ–≤—å–µ", style=discord.ButtonStyle.primary, emoji="üíä")
    async def health_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("health", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", style=discord.ButtonStyle.primary, emoji="üë©‚ÄçüöÄ")
    async def profession_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("profession", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–•–æ–±–±–∏", style=discord.ButtonStyle.primary, emoji="üíª")
    async def hobby_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("hobby", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–ë–∞–≥–∞–∂", style=discord.ButtonStyle.primary, emoji="üß≥")
    async def luggage_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("luggage", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–§–∞–∫—Ç 1", style=discord.ButtonStyle.primary, emoji="üíå")
    async def fact1_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("fact1", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–§–∞–∫—Ç 2", style=discord.ButtonStyle.primary, emoji="üíå")
    async def fact2_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("fact2", inter.user.id)

        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–§–æ–±–∏—è", style=discord.ButtonStyle.primary, emoji="ü§°")
    async def phobia_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        await inter.message.edit(view=self)
        await self.send("phobia", inter.user.id)
        await inter.response.send_message("–í—Å–∫—Ä—ã—Ç–æ")
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–ê–∫—Ç–∏–≤–Ω–∞—è –ö–∞—Ä—Ç–∞", style=discord.ButtonStyle.success, emoji="üé¥")
    async def action_card_callback(self, inter: discord.Interaction, button: discord.Button):
        button.disabled = True
        # TODO
        await inter.message.edit(view=self)
        # await self.send("action_card", inter.user.id)
        async with httpx.AsyncClient() as client:
            try:
                game = await client.get(
                    "http://api:9462/bunker/api/v1/get-game/{}".format(self.game_code),
                    timeout=60
                )
                if game.status_code // 100 in [4, 5]:
                    await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                    return
                game = game.json()
                response = await client.post(
                    "http://api:9462/bunker/api/v1/use-active-card/{}/{}".format(self.game_code, inter.user.id),
                    json={"user_id": inter.user.id, "switch": False},
                )
                if response.status_code == 424:
                    button.disabled = False
                    # TODO

                    await inter.message.edit(view=self)
                    if len(self.messages) != 0:
                        await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                        message = await inter.original_response()
                        await message.delete(delay=5)
                        return
                    view = ActiveCardControlButtons(self.game_code, self.bot)
                    view.original_view = self
                    view.original_message = inter.message
                    for p in game["users"]:
                        user: discord.User = await self.bot.fetch_user(p["user_id"])
                        button = ActiveCardButton(
                            label=user.name, custom_id=str(user.id) + self.bot.generate_random_code(), emoji="ü™¶"
                        )
                        if not p["active"] or p["user_id"] == inter.user.id:
                            button.disabled = True
                            button.custom_id = "-1" + self.bot.generate_random_code()
                        view.add_item(button)
                    button = ActiveCardButton(
                        label="–û—Ç–º–µ–Ω–∞", custom_id="stop_vote" + self.bot.generate_random_code()
                    )
                    view.add_item(button)
                    message = await inter.user.send("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞", view=view)
                    view.message = message
                    self.messages.append(message)
                    try:
                        await inter.response.defer()
                    except discord.errors.NotFound:
                        pass
                    return
                if response.status_code // 100 in [4, 5]:
                    await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                    message = await inter.original_response()
                    await message.delete(delay=5)
                    return
            except httpx.TimeoutException:
                await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                message = await inter.original_response()
                await message.delete(delay=5)
                return
        await inter.response.send_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
        await self.send("action_card", inter.user.id)
        message = await inter.original_response()
        await message.delete(delay=5)

    @discord.ui.button(label="–í—ã–π—Ç–∏", style=discord.ButtonStyle.red, emoji="‚ö∞Ô∏è")  # ü™¶
    async def exit_callback(self, inter: discord.Interaction, button: discord.Button):
        is_host = False
        for i in self.children:
            if i.label == "–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ":
                is_host = True
                continue
            i.disabled = True

        button.style = discord.ButtonStyle.secondary
        await inter.message.edit(view=self)
        if not is_host:
            self.stop()

        async with httpx.AsyncClient() as client:
            try:
                response = await client.patch(
                    "http://api:9462/bunker/api/v1/leave-game/{}/{}".format(self.game_code, inter.user.id)
                )
                if response.status_code // 100 in [4, 5]:
                    await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                    return
            except httpx.TimeoutException:
                await inter.response.send_message("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                return
        await inter.response.send_message("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã")

# -*- coding: utf-8 -*-
import discord
import difflib

from discord.ext import commands
from discord import app_commands


class Info(commands.Cog):
    PHOBIAS = {
        'Агорафобия': 'Страх перед открытыми пространствами, боязнь толпы',
        'Айхмофобия': 'Сильный страх при виде острых предметов',
        'Акрофобия': 'Страх высоты',
        'Агризоофобия': 'Страх возникает из-за диких животных',
        'Альгофобия, алгофобия': 'Страх перед болью',
        'Аматофобия': 'Страх пыли',
        'Аррхенфобия': 'Боязнь мужчин',
        'Астрофобия': 'Страх при виде ночного неба со звездами и луной',
        'Бактрахофобия': 'Страх, вызываемый рептилиями, змеями',
        'Арахнофобия': 'Страх, вызываемый пауками',
        'Баллистофобия': 'Панический страх перед пулями, ракетами, дротиками и копьями',
        'Батофобия': 'Страх перед высокими зданиями',
        'Беленофобия': 'Человек боится уколоться острыми предметами и инъекций',
        'Библиофобия': 'Книги и библиотеки служат причиной панического страха',
        'Богифобия (фазмофобия)': 'Страх перед призраками, дьяволом, пугалами',
        'Ботанофобия (ботонофобия)': 'Страх перед растениями',
        'Бронтофобия (кераунофобия)': 'Гром, молния, гроза и шторм вызывают панический ужас',
        'Венерофобия': 'Боязнь венерических заболеваний',
        'Винофобия': 'Страх перед употреблением алкогольных напитков',
        'Виккафобия': 'Ужас вызывают колдуны и ведьмы',
        'Гаптофобия': 'Страх тактильных контактов с окружающими',
        'Гексакосиойгексеконтагексапараскаведекатриафобия': 'Число 666 вызывает ужас в пятницу, 13 числа',
        'Гемофобия': 'Ужас при виде крови, человек может упасть в обморок или истерически кричать',
        'Геронтофобия': 'Человек страшится не только старости, но и общения с людьми преклонного возраста',
        'Герпетофобия': 'Страх, вызываемый змеями, пресмыкающимися или рептилиями',
        'Гимнофобия': 'Страх оказаться обнаженным',
        'Гленофобия': 'Страх, вызываемый куклами, особенно перед их взглядами',
        'Гоминофобия': 'Боязнь мужчин',
        'Зоофобия': 'Страх, вызываемый животными, как правило, определенного вида',
        'Канцерофобия': 'Человек боится заболеть раком',
        'Клаустрофобия': 'Страх оказаться в закрытом пространстве',
        'Космософобия': 'Боязнь космических катастроф',
        'Ксерофобия': 'Страх засухи или сухости',
        'Лутрафобия': 'Боязнь выдр',
        'Малевзиофобия (также токофобия)': 'Паническая боязнь рожать',
        'Метифобия': 'Страх, возникающий из-за алкогольных напитков',
        'Мизофобия': 'Панический страх перед грязью',
        'Моторофобия': 'Панический страх перед автомобилями',
        'Некрофобия': 'Страх возникающий из-за всего, что так или иначе связано с мертвецами',
        'Одонтофобия': 'Страх, испытываемый перед стоматологом',
        'Онанофобия': 'Страх, что онанизм приведет к отрицательным последствиям',
        'Партенофобия': 'Страх перед девушками',
        'Пеладофобия': 'Страх облысеть',
        'Спидофобия': 'Боязнь заразиться спидом',
        'Сатанофобия (также демонофобия)': 'Боязнь сатаны',
        'Спектрофобия': 'Страх, вызываемый зеркалами',
        'Тетрафобия': 'Страх перед цифрой «четыре»',
        'Токофобия': 'Боязнь родов',
        'Технофобия': 'Человека пугает технический прогресс',
        'Фобофобия': 'Боязнь фобий',
        'Эротофобия': 'Страх, вызываемый половыми отношениями',
        'Птеранофобия': 'Человек страшится птичьих перьев',
        'Книдофобия': 'Страх, вызываемый насекомыми, которые могут ужалить',
        'Элурофобия': 'Кошки и коты вызывают панический страх',
        'Кинофобия': 'Страх перед собаками и их укусами',
        'Эпистемофобия': 'Змеи вызывают страх',
        'Кионофобия': 'Страх, вызываемый снегом',
        'Коулрофобия': 'Клоуны внушают панический страх'
    }

    def __init__(self, bot: commands.Bot, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.bot = bot

    @app_commands.command(name="info", description="Гайд на игру")
    async def __info(self, inter: discord.Interaction):
        essence_of_the_game = discord.Embed(
            title="Суть игры",
            description="\"Бункер\" – дискуссионная игра о выживании после апокалипсиса. "
                        "\nНа Земле грядёт глобальная катастрофа. Вам повезло, вы оказались перед входом в "
                        "\nспасательный бункер, в котором можно пережить самый опасный период. "
                        "\nНо попасть в бункер смогут не все – а лишь половина из вас! "
                        "\nЗа несколько раундов игроки решают, кого НЕ берут в бункер. "
                        "\nПопавшие в бункер – выживут, чтобы затем возродить цивилизацию.",
            color=16711680
        )
        essence_of_the_game.set_author(
            name="desairado",
            url="https://www.twitch.tv/desairado",
            icon_url="https://static-cdn.jtvnw.net/jtv_user_pictures/"
                     "611f3014-af59-4535-b312-a02cd23dfbe8-profile_image-70x70.png"
        )
        rules_of_the_game = discord.Embed(
            title="Правила игры",
            description="**Цель игры:** Выжить в постапокалиптическом мире, убежав в бункер. "
                        "Игроки должны убедить других, что они достойны места в бункере.\n\n"
                        "**Количество игроков:** 5-12 человек.",
            color=65335
        )
        rules_of_the_game.set_author(
            name="desairado",
            url="https://www.twitch.tv/desairado",
            icon_url="https://static-cdn.jtvnw.net/jtv_user_pictures/"
                     "611f3014-af59-4535-b312-a02cd23dfbe8-profile_image-70x70.png"
        )
        rules_of_the_game.add_field(
            name="Подготовка",
            inline=False,
            value="**1. Карты персонажей:** Каждому игроку раздаётся по одной карте персонажа, "
                  "содержащей информацию об их навыках, профессии, возрасте, здоровье, фобиях и "
                  "других характеристиках.\n2. Карты условий: Создаются условия, в которых происходит игра "
                  "(катастрофа, ресурсы, вместимость бункера и т.д.)."
        )
        rules_of_the_game.add_field(
            name="Игровой процесс",
            inline=False,
            value="**1. Обсуждение:** Игроки по очереди раскрывают свои характеристики и обсуждают, "
                  "почему их персонаж должен быть выбран для входа в бункер. Обсуждение ведётся в "
                  "несколько раундов.\n2. Голосование: После каждого раунда обсуждения проходит голосование, "
                  "в котором игроки решают, кто покинет игру.\n3. Дополнительные условия: В некоторых раундах "
                  "могут быть открыты дополнительные карты, изменяющие условия игры "
                  "или добавляющие новые характеристики персонажам."
        )
        rules_of_the_game.add_field(
            name="Конец игры",
            inline=False,
            value="- Игра продолжается до тех пор, пока не останется необходимое количество игроков для "
                  "заполнения бункера.\n- Результат игры зависит от навыков игроков"
        )
        active_cards = discord.Embed(
            title="Активные карты",
            description="```diff\n- Активные карты с характеристиками можно использовать только в том случае, "
                        "если у обоих игроков вскрыта эта характеристика. \n```",
            color=13369599
        )
        active_cards.set_author(
            name="desairado",
            url="https://www.twitch.tv/desairado",
            icon_url="https://static-cdn.jtvnw.net/jtv_user_pictures/"
                     "611f3014-af59-4535-b312-a02cd23dfbe8-profile_image-70x70.png"
        )
        active_cards.add_field(
            name='Обмен картами с игроком на выбор',
            inline=False,
            value='Обменяться картой "Здоровье", "Профессия", "Хобби" или "Багаж"'
        )
        active_cards.add_field(
            name='Обмен картами со случайным игроком',
            inline=False,
            value='Обменяться картой "Здоровье", "Профессия", "Хобби" или "Багаж"'
        )
        active_cards.add_field(
            name='Перемешивание карт',
            inline=False,
            value='Перемешать карту "Здоровье", "Профессия", "Хобби" или "Багаж"'
        )
        active_cards.add_field(
            name='Лечение здоровья',
            inline=False,
            value='- Вылечить здоровье игроку на выбор, кроме себя\n- Вылечить здоровье себе'
        )
        active_cards.add_field(
            name='Изменение количества мест в бункере',
            inline=False,
            value='- Добавить 1 место в бункере\n- Отнять одно место в бункере'
        )
        active_cards.add_field(
            name='Открытие объектов рядом с бункером',
            inline=False,
            value='- Открыть дружественный бункер\n'
                  '- Открыть вражеский бункер\n'
                  '- Открыть заброшенную больницу\n'
                  '- Открыть заброшенный военный лагерь'
        )
        active_cards.add_field(
            name='Ограничение действий игрока',
            inline=False,
            value='- Запретить голосовать одному игроку на выбор на 1 круг голосования\n'
                  '- Запретить голосовать за себя на один круг голосования\n'
                  '- Выгнать одного игрока на выбор без голосования\n'
                  '- Запретить речь игроку на выбор на этот или следующий круг'
        )
        scenario_generation = discord.Embed(
            title="Генерация сценариев",
            color=55807
        )
        scenario_generation.set_author(
            name="D1ffic00lt",
            url="https://github.com/D1ffic00lt",
            icon_url="https://avatars.githubusercontent.com/u/69642892?v=4"
        )
        scenario_generation.add_field(
            name='Основная информация',
            inline=False,
            value='В начале каждой игры, после ввода команды </start:1229394316804358165>, '
                  '[искусственный интеллект](https://ya.ru/ai/gpt-3) '
                  'генерирует данные игры: \n- катастрофу\n- бункер\n- угрозу в бункере'
        )
        scenario_generation.add_field(
            name='Данные игрока',
            inline=False,
            value='После вводом игрока команды </join:1229391724388810775> '
                  '[искусственный интеллект](https://ya.ru/ai/gpt-3) '
                  'генерирует уникальные характеристики: \n'
                  '- Пол и возраст (вскрываются одновременно)\n'
                  '- Профессию и стаж \n'
                  '- Хобби\n'
                  '- Здоровье \n'
                  '- Багаж\n'
                  '- Фобию\n'
                  '- Факт 1\n'
                  '- Факт 2\n'
                  '- Активная карта'
        )
        scenario_generation.add_field(
            name='Результат',
            inline=False,
            value='После окончания игры (</get-result:1231301429067518003>) '
                  '[искусственный интеллект](https://ya.ru/ai/gpt-3) '
                  'генерирует результаты игры на основе сценария и игроков попавших в бункер. '
                  'Результат игры высылается всем участникам. '
        )
        await inter.response.send_message(embeds=[
            essence_of_the_game, rules_of_the_game, active_cards, scenario_generation
        ])

    @app_commands.command(name="help", description="Доступные команды")
    async def __help(self, inter: discord.Interaction):
        emb = discord.Embed(
            title="Команды",
            description="</new-game:1229389257643393065> - создать новую игру\n"
                        "</join:1229391724388810775> - войти в игру\n"
                        "</start:1229394316804358165> - начать игру\n"
                        "</reset-votes:1245044918683045948> - обнулить голосование\n"
                        "</leave:1231301429067518004> - выйти из игры (аналогично кнопки \"Выйти\")\n"
                        "</get-result:1231301429067518003> - получить результаты игры\n"
                        "</info:1265962881225199677> - общая информация об игре\n"
                        "</get-frame:1253783837029433375> - получить рамку игрока\n"
                        "</phobia:1266019347185533013> - получить описание фобии\n"
                        "</help:1266019347185533012> - гайд по всем командам"
        )
        await inter.response.send_message(embed=emb)

    @app_commands.command(name="phobia", description="Узнать значение фобии")
    async def __phobia(self, inter: discord.Interaction, phobia: str):
        closest_matches = difflib.get_close_matches(phobia, self.PHOBIAS.keys(), n=1, cutoff=0.5)
        if not closest_matches:
            await inter.response.send_message("Фобия не найдена!")
            return
        await inter.response.send_message(f"{closest_matches[0]} - {self.PHOBIAS[closest_matches[0]]}")

